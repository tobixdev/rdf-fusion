[workspace]
members = [
    "bench",
    "cli",
    "examples",
    "lib/extensions",
    "lib/model",
    "lib/encoding",
    "lib/execution",
    "lib/functions",
    "lib/logical",
    "lib/physical",
    "lib/storage",
    "lib/rdf-fusion",
    "lib/web",
    "testsuite",
]
resolver = "2"

[workspace.package]
version = "0.1.0"
authors = ["Tobias Schwarzinger <tobias.schwarzinger@tuwien.ac.at>"]
license = "Apache-2.0"
edition = "2024"
rust-version = "1.86" # Minimum Supported Rust Version (Adopt from DataFusion)
repository = "https://github.com/tobixdev/rdf-fusion"

[workspace.dependencies]
anyhow = "1.0"
async-trait = "0.1"
bzip2 = "0.6"
chrono = "0.4"
clap = "4.5"
clap_complete = "4.5"
clap_mangen = "0.2"
csv = "1.4"
datafusion = "50.3"
dashmap = "6.1"
futures = "0.3"
itertools = "0.14"
md-5 = "0.10"
rand = "0.9"
rand_distr = "0.5"
regex = "1.12"
reqwest = "0.12"
rustc-hash = "2.1"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
sha1 = "0.10"
sha2 = "0.10"
snmalloc-rs = "0.3"
thiserror = "2.0"
time = "0.3"
tokio = { version = "1.48", features = ["rt", "rt-multi-thread"] }
uuid = "1.18"
zip = "6.0"

# Logging / Tracing

tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["fmt", "env-filter"] }

# Web Dependencies

axum = "0.8"
axum-extra = { version = "0.10", features = ["typed-header"] }
axum-test = "18.2"
headers = "0.4"
headers-accept = "0.2"
mediatype = "0.20"
tower-http = { version = "0.6", features = ["cors", "trace"] }

# Testing / Benchmarking dependencies

codspeed-criterion-compat = "4.0"
insta = { version = "1.43", features = ["filters"] }
prettytable-rs = "0.10"
text-diff = "0.4"
tokio-test = "0.4"

# Upstream Oxigraph dependencies
oxttl = "0.2"
oxiri = "0.2"
oxrdf = "0.3"
oxrdfio = "0.2"
oxsdatatypes = "0.2"
sparesults = "0.3"
spargebra = "0.4"

# Internal dependencies
rdf-fusion-extensions = { version = "=0.1.0", path = "lib/extensions" }
rdf-fusion-model = { version = "=0.1.0", path = "lib/model" }
rdf-fusion-encoding = { version = "=0.1.0", path = "lib/encoding" }
rdf-fusion-execution = { version = "=0.1.0", path = "lib/execution" }
rdf-fusion-functions = { version = "=0.1.0", path = "lib/functions" }
rdf-fusion-logical = { version = "=0.1.0", path = "lib/logical" }
rdf-fusion-physical = { version = "=0.1.0", path = "lib/physical" }
rdf-fusion-storage = { version = "=0.1.0", path = "lib/storage" }
rdf-fusion = { version = "=0.1.0", path = "lib/rdf-fusion" }
rdf-fusion-web = { version = "=0.1.0", path = "lib/web" }

#
# Most of the remainder of this file (profiles & lints) stem from DataFusion.
#

[profile.release]
codegen-units = 1
lto = true
strip = true      # Eliminate debug information to minimize binary size

# the release profile takes a long time to build so we can use this profile during development to save time
# cargo build --profile release-nonlto
[profile.release-nonlto]
codegen-units = 16
debug-assertions = false
incremental = false
inherits = "release"
lto = false
opt-level = 3
overflow-checks = false
rpath = false
strip = false            # Retain debug info for flamegraphs

[profile.ci]
inherits = "dev"
incremental = false

# ci turns off debug info, etc. for dependencies to allow for smaller binaries making caching more effective
[profile.ci.package."*"]
debug = false
debug-assertions = false
strip = "debuginfo"
incremental = false

# release inherited profile keeping debug information and symbols
# for mem/cpu profiling
[profile.profiling]
inherits = "release"
debug = true
strip = false

# release-non-lto inherited profile keeping debug information and symbols for mem/cpu profiling. "Full" release builds
# tend to violate the resource constraints of the GitHub runners.
[profile.profiling-nonlto]
inherits = "release-nonlto"
debug = true
strip = false

[workspace.lints.clippy]
# Detects large stack-allocated futures that may cause stack overflow crashes (see threshold in clippy.toml)
large_futures = "warn"
used_underscore_binding = "warn"
or_fun_call = "warn"
unnecessary_lazy_evaluations = "warn"
uninlined_format_args = "warn"
clone_on_ref_ptr = "warn"

[workspace.lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(datafusion_coop, values("tokio", "tokio_fallback", "per_stream"))',
    "cfg(tarpaulin)",
    "cfg(tarpaulin_include)",
] }
unused_qualifications = "deny"
